# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Achievement {
  _id: ID!
  caption: String
  continuous: Boolean!
  detail: [AchievementDetail]
  point: Int
  star: Int
  target_point: Int
  text: String!
  title: String!
  updated_at: String!
}

type AchievementDetail {
  _id: ID!
  achievement: ID!
  caption: String!
  star: Int!
  target_point: Int!
  updated_at: String!
}

type AuthPayload {
  tokens: Tokens
  user: User
}

type Avatar {
  _id: ID!
  imageid: String
  min_exp: Int
  title: String
  unlock: Boolean
  updated_at: String!
}

type Badge {
  _id: ID!
  imageid: String
  title: String
  updated_at: String!
}

type Course {
  _id: ID!
  badge: Badge
  desc: String!
  imageid: String
  index: Int
  leaderboard: [Leaderboard]
  name: String!
  script: String
  stages: [Stage]
  updated_at: String!
}

type File {
  id: ID!
  path: String!
  title: String!
}

type Leaderboard {
  _id: ID!
  player: Player
  score: Int!
}

type Material {
  _id: ID!
  body: String
  materialType: MaterialType
  stage: Stage
  url: String
}

type Mission {
  _id: ID!
  quest: String!
  score: Int!
  testcase: [TestCaseMission]
  updated_at: String!
}

type Mutation {
  addAchievement(continuous: Boolean!, file: Upload, title: String!): Achievement
  addAvatar(image: Upload, min_exp: Int!, title: String!): Avatar
  addBadge(imageid: String, title: String!): Badge
  addBadgePlayer(badge: ID!, id: ID!): Player
  addCourse(desc: String!, file: Upload, name: String!, script: String): Course
  addDetailAchievement(achievement: ID!, caption: String!, star: Int!, target_point: Int!): AchievementDetail
  addEnergy(energy: Int!, userid: ID!): Player
  addExp(exp: Int!, userid: ID!): Player
  addFriend(friendid: ID!, playerid: ID!): Player
  addMission(quest: String!, score: Int!, stage: ID!): Mission
  addPlayerAchievement(achievement: ID!, player: ID!, point: Int!, star: Int!): Achievement
  addPlayerLevel(exp_req: Int!, level: Int!): PlayerLevel
  addScore(course: ID!, player: ID!, score: Int!, script: String!, stage: ID!, stars: [Boolean]!, time: Int!): Score
  addStage(course: ID!, exp_reward: Int, index: Int, language: String, script: String, teory: String, time: Int, title: String!, type: StageType): Stage
  addTestCase(caption: String!, script: String!): TestCase
  addTestCaseMission(mission: ID!, params: [String], testcase: ID!): TestCaseMission
  changeAvatar(avatar: ID!, player: ID!): Player
  createMaterial(input: MaterialInput!): Material
  createQuiz(input: QuizInput!): Quiz
  deleteCourse(id: ID!): Course
  deleteMaterial(id: ID!): Material
  deleteQuiz(id: ID!): Quiz
  deleteStage(id: ID!): Stage
  deleteTestCaseMission(id: ID!): TestCaseMission
  deleteTestcase(id: ID!): TestCase
  giveAchievement(achievement: ID!, player: ID!): Achievement
  register(email: String!, name: String!, password: String!): User
  reorderStage(courseid: ID, destination: Int, source: Int): Course
  setTutorial(index: Int, tutorial: Boolean, userid: ID!): Player
  signIn(email: String!, password: String!): AuthPayload
  signUp(email: String!, name: String!, password: String!, role: String!): AuthPayload
  submitQuiz(input: QuizSubmitInput!): Score
  updateBadge(course: ID, id: ID, image: Upload, title: String): Badge
  updateCourse(desc: String, file: Upload, id: ID!, name: String, script: String): Course
  updateMaterial(input: MaterialInput!, where: MaterialWhere!): Material
  updateMission(id: ID!, quest: String, score: Int): Mission
  updateQuiz(id: ID!, input: QuizInput!): Quiz
  updateStage(course: ID, exp_reward: Int, file: Upload, id: ID!, index: Int, language: String, script: String, teory: String, time: Int, title: String): Stage
  uploadFile(input: FileInput!): File
  uploadImage(courseid: ID, file: Upload): String
  upsertMaterial(data: MaterialInput!, id: ID!): Material
  upsertQuiz(data: QuizInput!, id: ID!): Quiz
}

type Player {
  _id: ID!
  achievement_total: Int
  achievements: [Achievement]
  avatar: Avatar
  avatars: [Avatar]
  badges: [Badge]
  birthday: String
  course: [Course]
  daily_exp: Int
  daily_login: Boolean
  energy: Int!
  energy_time: String
  exp: Int
  friends: [ID]
  level: Int
  stars: Int
  target_exp: Int
  tutorial: [Boolean]
  updated_at: String
  user: User!
}

type PlayerAchievement {
  _id: ID!
  achievement: ID!
  player: ID!
  point: Int!
  star: Int!
  updated_at: String!
}

type PlayerLevel {
  _id: ID!
  exp_req: Int!
  level: Int!
  updated_at: String!
}

type Query {
  File(id: ID!): Course
  achievements(_id: ID, player: ID): [Achievement]
  allQuiz: [Quiz]
  avatars: [Avatar]
  badges: [Badge]
  courses(_id: ID): [Course]
  files: [File]
  material(css: Boolean = true, where: MaterialWhere!): Material
  materials: [Material]
  missions: [Mission]
  playerAchievements: [PlayerAchievement]
  playerLevel: [PlayerLevel]
  players(_id: ID, energy: Int): [Player]
  quiz(random: Boolean = false, where: QuizWhere!): Quiz
  scores: [Score]
  stages(_id: ID, course: ID, player: ID): [Stage]
  testCaseMissions(_id: ID, mission: ID): [TestCaseMission]
  testcases: [TestCase]
  users(_id: ID): [User]
}

type Question {
  answer: String
  choice: [String]
  content: String
  questionType: QuestionType
  score: Int!
}

type Quiz {
  _id: ID!
  questions: [Question]
  stage: Stage
  time: Int
  title: String
}

type Score {
  _id: ID!
  course: Course
  player: Player
  score: Int!
  script: String!
  stage: Stage
  stages: [Stage]
  stars: [Boolean]!
  time: Int!
  updated_at: String!
}

type Stage {
  _id: ID!
  badge_image: String
  badge_name: String
  course: Course
  exp_reward: Int
  imageid: String
  index: Int
  language: String
  material: Material
  missions: [Mission]
  quiz: Quiz
  score: Int
  script: String
  stars: [Boolean]
  teory: String
  time: Int
  title: String!
  type: StageType
  updated_at: String!
  win: Boolean
}

type TestCase {
  _id: ID
  caption: String
  script: String
  updated_at: String
}

type TestCaseMission {
  _id: ID!
  mission: ID!
  params: [String]
  testcase: TestCase
  updated_at: String!
}

type Tokens {
  accessToken: String
  refreshToken: String
}

type User {
  _id: ID!
  city: String
  email: String!
  last_login: String
  name: String!
  password: String!
  province: String
  role: String!
  updated_at: String!
  userdetailid: String!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum MaterialType {
  PDF
  WEB
}

enum QuestionType {
  ESSAY
  MULTIPLE_CHOICE
}

enum StageType {
  MATERIAL
  PROGRAMMING
  QUIZ
}

input AnswerInput {
  answer: String
  index: Int!
}

input FileInput {
  file: Upload!
  title: String!
}

input MaterialInput {
  body: String
  materialType: MaterialType
  stage: ID
  url: String
}

input MaterialWhere {
  _id: ID
  stage: ID
}

input QuestionInput {
  answer: String
  choice: [String]
  content: String
  questionType: QuestionType
  score: Int!
}

input QuizInput {
  questions: [QuestionInput]
  stage: ID
  time: Int
  title: String
}

input QuizSubmitInput {
  answer: [AnswerInput]
  player: ID
  quiz: ID
  time: Int
}

input QuizWhere {
  id: ID
  stage: ID
}


"The `Upload` scalar type represents a file upload."
scalar Upload
