type Evaluation {
    id : ID!
    questions: [QuestionEvaluation]
    stage : Stage
}

type QuestionEvaluation {
    evaluation: Evaluation
    index : Int
    question : Question
}
enum QuestionType {
    MULTIPLE_CHOICE
    ESSAY
}
input QuestionInput {
    content: String
    type : QuestionType
    choice : [String]
    answer : String
    score : Int!
}

type Question {
    content: String!
    type : QuestionType!
    choice : [String]
    answer : String
    score : Int!
}

input QuestionDetailInput {
    question : QuestionInput
    score : Int
}

input EvaluationInput {
    time: Int
    questions: [QuestionInput]
    content: ID
}
input EvaluationWhere {
    id: ID
    content: ID
}

input AnswerInput {
    index : Int!
    answer : String,
}

input EvaluationSubmitInput {
    time: Int
    evaluation: ID
    user: ID
    answer: [AnswerInput]

}

extend type Query {
    evaluation(where: EvaluationWhere!, random: Boolean = false) : Evaluation @auth(requires: [USER,ADMIN])
    evaluations: [Evaluation] @auth(requires: [USER,ADMIN])
}


extend type Mutation {
    createEvaluation(input : EvaluationInput!): Evaluation @auth(requires: [ADMIN])
    upsertEvaluation(id: ID!, data: EvaluationInput!) : Evaluation @auth(requires: [ADMIN])
    updateEvaluation(id: ID!, input : EvaluationInput!): Evaluation @auth(requires: [ADMIN])
    deleteEvaluation(id : ID!): Evaluation @auth(requires: [ADMIN])
    submitEvaluation(input : EvaluationSubmitInput!): Score @auth(requires: [USER,ADMIN])
}
